\ Удаление уже отработанных
\ Дополнение к 'crontab.f'

GET-CURRENT
GET-ORDER
ONLY FORTH DEFINITIONS
USER-VALUE DEL-RES
SET-ORDER
SET-CURRENT

USER-VALUE CRONTAB-CONTENT
USER-VALUE TASK-FOUND?
USER-VALUE hDELETED
USER-CREATE <TASK-NAME> 2 CELLS USER-ALLOT
: TASK-NAME  <TASK-NAME> 2@ ;
USER-CREATE <CRONTAB-NAME> 2 CELLS USER-ALLOT
: CRONTAB-NAME <CRONTAB-NAME> 2@ ;

USER-VALUE NEED-BACKUP
USER-VALUE LAST-LINE-OF-TASK

: DELETED-FILENAME S" deleted.tab" ;

\ Текущий адрес элемента нах-ся в CUR-NODE (value)

1 [IF]
: COPY-LINE-TO-NEW-FILE
    LAST-LINE-OF-TASK
    IF SOURCE NIP ELSE TRUE THEN
    IF SOURCE CRONTAB-CONTENT +ZPLACE
       LT LTL @ CRONTAB-CONTENT +ZPLACE
     THEN
    FALSE TO LAST-LINE-OF-TASK
;
[ELSE]
: COPY-LINE-TO-NEW-FILE
    LAST-LINE-OF-TASK
    IF SOURCE NIP ELSE TRUE THEN
    IF SOURCE CRON-DEL-NEW-FILE WRITE-LINE DROP THEN
    FALSE TO LAST-LINE-OF-TASK
;
[THEN]

: ?COMMENT
    HERE 1+ C@ [CHAR] # =
    IF 1 WORD DROP THEN
;

: IS-BEG-TASK?
    BEGIN BL WORD COUNT ?DUP WHILE
        S" #(" COMPARE 0=
        IF BL WORD COUNT
            TASK-NAME COMPARE 0= EXIT
        ELSE
            ?COMMENT
        THEN
    REPEAT
    DROP FALSE
;

: IS-END-TASK?
    BEGIN BL WORD COUNT ?DUP WHILE
        S" )#" COMPARE 0= IF TRUE EXIT THEN
        ?COMMENT
    REPEAT
    DROP FALSE
;

: WRITE-TO-DELETED
    hDELETED IF SOURCE hDELETED WRITE-LINE DROP THEN
;

: CRON-DELETE-PREFIX
    TASK-FOUND?
    IF
        WRITE-TO-DELETED
        IS-END-TASK?
        IF  TRUE TO LAST-LINE-OF-TASK
            FALSE TO TASK-FOUND?
        THEN  
    ELSE
        IS-BEG-TASK?
        IF
            WRITE-TO-DELETED
            IS-END-TASK? 0=
            IF TRUE TO TASK-FOUND? THEN
        ELSE
            COPY-LINE-TO-NEW-FILE
        THEN
    THEN
    1 WORD DROP
;

: LOG-DEL ( # -- )
    TO DEL-RES S" Deleting ERROR # %DEL-RES%"
    EVAL-SUBST TYPE CR
    
;

           0 [IF]
           : DELETE-TASK ( atab utab atask utask flag-backup -- )
               TO NEED-BACKUP
               <TASK-NAME> 2! <CRONTAB-NAME> 2!
               CRONTAB-NAME MAKE-BAK ?DUP          IF LOG-DEL EXIT THEN 
               CRONTAB-NAME W/O CREATE-FILE ?DUP   IF LOG-DEL DROP EXIT THEN 
                   TO CRON-DEL-NEW-FILE
               NEED-BACKUP
               IF  DELETED-FILENAME R/W OPEN-FILE-SHARED ?DUP
                   IF LOG-DEL DROP 0 THEN
               ELSE 0 THEN
                   TO hDELETED
               hDELETED IF hDELETED >EOF THEN
               FALSE TO TASK-FOUND?
               ['] <PRE> BEHAVIOR >R
               ['] CRON-DELETE-PREFIX TO <PRE>
               FALSE TO LAST-LINE-OF-TASK
               CRONTAB-NAME MAKE-BAK-PATH ['] INCLUDED CATCH ?DUP
                               IF LOG-DEL 2DROP THEN
               R> TO <PRE>

               CRON-DEL-NEW-FILE CLOSE-FILE DROP
               hDELETED ?DUP IF  CLOSE-FILE DROP THEN
           ;
           [THEN]


USER-VALUE hCTAB

: DELETE-TASK ( atab utab atask utask flag-backup -- )
    TO NEED-BACKUP
    <TASK-NAME> 2! <CRONTAB-NAME> 2!
    CRONTAB-NAME MAKE-BAK             ?DUP   IF LOG-DEL EXIT THEN 
    CRONTAB-NAME R/W OPEN-FILE-SHARED ?DUP   IF LOG-DEL DROP EXIT THEN 
        TO hCTAB
    NEED-BACKUP
    IF  DELETED-FILENAME R/W OPEN-FILE-SHARED ?DUP
        IF LOG-DEL DROP 0 THEN
    ELSE 0 THEN
        TO hDELETED
    hDELETED IF hDELETED >EOF THEN
    FALSE TO TASK-FOUND?
    ['] <PRE> BEHAVIOR >R
    ['] CRON-DELETE-PREFIX TO <PRE>
    hCTAB FILE-SIZE 2DROP ALLOCATE THROW TO CRONTAB-CONTENT
    FALSE TO LAST-LINE-OF-TASK
    CRONTAB-NAME ['] INCLUDED CATCH ?DUP
                    IF LOG-DEL 2DROP THEN
    R> TO <PRE>
    CRONTAB-CONTENT ASCIIZ> hCTAB WRITE-FILE ?DUP IF LOG-DEL THEN
    CRONTAB-CONTENT ASCIIZ> NIP S>D hCTAB RESIZE-FILE ?DUP IF LOG-DEL THEN
    CRONTAB-CONTENT FREE DROP
    hCTAB CLOSE-FILE DROP
    hDELETED ?DUP IF  CLOSE-FILE DROP THEN
;


